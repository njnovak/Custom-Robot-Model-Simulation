<launch>
    <param name= "robot_description" command="$(find xacro)/xacro --inorder $(find scalable_arm)/urdf/scalable_arm.urdf" />
    <!-- Add in your robot name in the value tag -->

    <param name = "my_robot" value="scalable_arm"/> 
    <arg name ="init_pose" value="-x 0 -y 0 -z 0 -R 0 -P 0 -Y 0"/>

    

    <!-- This command adds the controller variables you defined in the config file into ros's parameter list. Simply add the file name in the file tag -->
	<rosparam file="$(find scalable_arm)/config/conf_controllers.yaml" command="load"/>


	<!-- Node for publishing base footprint -->
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="use_gui" value="False"/>
    </node>


    <!-- TF node that gives the static transformation between the world map and the base link of your robot. Change /base_link to the /root link name of your robot -->
    <node pkg="tf" type="static_transform_publisher" name="map_to_base" args="1 0 0 0 0 0 1 /map /dummy_link 10" />


    <!-- Controller spawner: Starts all the defined controllers with their configs. Just add your controller names defined in your config file into the args tag below   -->
    <node name="controller_spwaner" pkg="controller_manager" type="spawner" respawn="false"
    	output="screen" ns="/scalable_arm" args="joint_state_controller arm_controller_1 arm_controller_2 arm_controller_3 arm_controller_4 arm_controller_5 arm_controller_6 finger_1_controller finger_2_controller" />
 <!-- arm_body_controller arm_mid_controller arm_end_controller right_finger_controller left_finger_controller -->

    <!-- A node to publish the robot states onto ros network -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen"/>	


    <!-- A node to spawn the robot into gazebo's world file. Notice that the args has the param robot_description that you previously defined. This is how your robot's spec gets included.-->
   	<node
		name="spawn_model"
		pkg="gazebo_ros"
		type="spawn_model"
		args="$(arg init_pose) -param robot_description -urdf -model scalable_arm"
		output="screen"/>


	<!--Default node -->
	<node
    name="fake_joint_calibration"
    pkg="rostopic"
    type="rostopic"
    args="pub /calibrated std_msgs/Bool true" />


</launch>